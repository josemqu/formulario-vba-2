Option Explicit

Public Sub RefreshAllValidations()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Worksheets("Form")

    Dim rng As Range, c As Range
    Dim logFail As String
    Dim triedAlt As Boolean

    On Error GoTo CleanExit
    Application.EnableEvents = False
    Application.ScreenUpdating = False

    ' Solo celdas que ya tienen validacion
    On Error Resume Next
    Set rng = ws.UsedRange.SpecialCells(xlCellTypeAllValidation)
    On Error GoTo 0

    If rng Is Nothing Then GoTo CleanExit

    For Each c In rng.Cells
        Dim vType As Long, vAlert As Long, vOper As Long
        Dim f1 As String, f2 As String
        Dim inCell As Boolean, ignBlank As Boolean
        Dim showErr As Boolean, showInput As Boolean
        Dim errTitle As String, errMsg As String
        Dim inTitle As String, inMsg As String

        ' Leer propiedades con proteccion por si alguna propiedad falla
        On Error Resume Next
        With c.Validation
            vType = .Type
            vAlert = .AlertStyle
            vOper = .Operator
            f1 = .Formula1
            f2 = .Formula2
            inCell = .InCellDropdown
            ignBlank = .IgnoreBlank
            showErr = .ShowError
            showInput = .showInput
            errTitle = .ErrorTitle
            errMsg = .ErrorMessage
            inTitle = .InputTitle
            inMsg = .InputMessage
        End With
        On Error GoTo 0

        ' Borrar validacion previa
        On Error Resume Next
        c.Validation.Delete
        On Error GoTo 0

        ' Intentar reaplicar original (siempre que tengamos algo)
        triedAlt = False
        On Error Resume Next
        c.Validation.Add Type:=vType, AlertStyle:=vAlert, Operator:=vOper, Formula1:=f1, Formula2:=f2
        If Err.Number <> 0 Then
            Dim firstErr As Long: firstErr = Err.Number
            Err.Clear
            ' Si fallo, intentar alternativa para listas: reemplazar ; por , dentro de la formula (solo si empieza con =)
            If vType = xlValidateList And Len(Trim(f1)) > 0 Then
                If Left(Trim(f1), 1) = "=" Then
                    Dim altF1 As String
                    altF1 = Replace(f1, ";", ",")
                    On Error Resume Next
                    c.Validation.Add Type:=vType, AlertStyle:=vAlert, Operator:=vOper, Formula1:=altF1, Formula2:=f2
                    If Err.Number = 0 Then
                        f1 = altF1
                        triedAlt = True
                    Else
                        Err.Clear
                    End If
                End If
            End If

            ' Si siguio fallando, intentar aÃ±adir sin Formula2 y sin Operator (compatibilidad)
            If Not triedAlt Then
                On Error Resume Next
                c.Validation.Add Type:=vType, AlertStyle:=vAlert, Formula1:=f1
                If Err.Number = 0 Then
                    Err.Clear
                Else
                    ' registrar fallo y continuar (no interrumpir todo el proceso)
                    logFail = logFail & c.Address(False, False, xlA1, True) & " (Err:" & firstErr & "); "
                    Err.Clear
                End If
            End If
        End If
        On Error GoTo 0

        ' Restaurar propiedades si la validacion se creo
        On Error Resume Next
        With c.Validation
            .InCellDropdown = inCell
            .IgnoreBlank = ignBlank
            .ShowError = showErr
            .showInput = False
            .ErrorTitle = errTitle
            .ErrorMessage = errMsg
            .InputTitle = inTitle
            .InputMessage = inMsg
        End With
        On Error GoTo 0
    Next c

CleanExit:
    Application.ScreenUpdating = True
    Application.EnableEvents = True

'    If Len(logFail) > 0 Then
'        MsgBox "Finished with failures in: " & vbCrLf & logFail, vbExclamation, "RefreshAllValidations"
'    Else
'        MsgBox "All validations refreshed.", vbInformation, "RefreshAllValidations"
'    End If
End Sub


Private Sub CommandButton1_Click()

    frmMapa.Show
    
End Sub

' Opcional: refrescar al activar la hoja
Private Sub Worksheet_Activate()
    Static didOnce As Boolean
    If didOnce Then Exit Sub
    didOnce = True
    RefreshAllValidations
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    On Error GoTo CleanExit
    Application.ScreenUpdating = False
    Application.EnableEvents = False

    ' Referencias por nombre (mas robusto ante inserciones de filas o columnas)
    Dim celdaOcurrencia As Range
    Dim celdaReporte As Range

    On Error Resume Next
    Set celdaOcurrencia = Me.Range("celdaFechaOcurrencia")
    Set celdaReporte = Me.Range("celdaFechaReporte")
    On Error GoTo 0

    ' Validar que los nombres existan antes de ejecutar
    If celdaOcurrencia Is Nothing Or celdaReporte Is Nothing Then
        GoTo CleanExit
    End If

    ' Logica principal
    If Target.CountLarge > 1 Then GoTo CleanExit
    ' Ignorar errores transitorios al alternar visibilidad de columnas
    On Error Resume Next
    Select Case True
        ' Si seleccionas la celda con nombre "celdaFechaOcurrencia"
        Case Not Intersect(Target, celdaOcurrencia) Is Nothing
            If Me.Columns("F").Hidden Or Not Me.Columns("G").Hidden Or Not Me.Columns("H").Hidden Then
                Me.Columns("F").Hidden = False
                Me.Columns("G").Hidden = True
                Me.Columns("H").Hidden = True
            End If

        ' Si seleccionas la celda con nombre "celdaFechaReporte"
        Case Not Intersect(Target, celdaReporte) Is Nothing
            If Not Me.Columns("F").Hidden Or Me.Columns("G").Hidden Or Not Me.Columns("H").Hidden Then
                Me.Columns("F").Hidden = True
                Me.Columns("G").Hidden = False
                Me.Columns("H").Hidden = True
            End If

        ' Si seleccionas cualquier otra celda
        Case Else
            If Not Me.Columns("F").Hidden Or Not Me.Columns("G").Hidden Or Me.Columns("H").Hidden Then
                Me.Columns("F").Hidden = True
                Me.Columns("G").Hidden = True
                Me.Columns("H").Hidden = False
            End If
    End Select
    On Error GoTo CleanExit

CleanExit:
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    On Error Resume Next
    If Target.CountLarge > 1 Then Exit Sub
    If Not Intersect(Target, Me.Range("W38:Z38")) Is Nothing Then
        Cancel = True
        modMultiSelectSupport.ShowMultiSelectForCell Target
    End If
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
    On Error Resume Next
    If Target.CountLarge > 1 Then Exit Sub
    If Not Intersect(Target, Me.Range("W38:Z38")) Is Nothing Then
        Cancel = True
        modMultiSelectSupport.ShowMultiSelectForCell Target
    End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim celdaProvincia As Range
    Dim celdaLocalidad As Range
    Dim nuevoValor As Variant
    Static valorAnterior As Variant

    On Error GoTo salir

    ' Asigna las celdas por nombre (deben estar definidas como nombres de rango)
    Set celdaProvincia = Me.Range("celdaProvincia")
    Set celdaLocalidad = Me.Range("celdaLocalidad")

    
    If Not Intersect(Target, celdaProvincia) Is Nothing Then
        Application.EnableEvents = False
        nuevoValor = celdaProvincia.value
        If nuevoValor <> valorAnterior Then
            celdaLocalidad.ClearContents
        End If
        valorAnterior = nuevoValor
        Application.EnableEvents = True
    End If

salir:
    Application.EnableEvents = True
End Sub

' === Wrapper de botones manuales ===
Public Sub BtnGuardarIncidente()
    On Error Resume Next
    modSheetIncidente.GuardarIncidenteDesdeHoja
End Sub

Public Sub BtnNuevoIncidente()
    On Error Resume Next
    modSheetIncidente.NuevoIncidenteEnHoja
End Sub

Public Sub BtnEliminarIncidente()
    On Error Resume Next
    modSheetIncidente.EliminarIncidenteDesdeHoja
End Sub

Public Sub BtnAgregarPersona()
    On Error Resume Next
    modSheetIncidente.AgregarColumnaPersona
End Sub

Public Sub BtnAgregarVehiculo()
    On Error Resume Next
    modSheetIncidente.AgregarColumnaVehiculo
End Sub

Public Sub BtnEliminarPersona()
    On Error Resume Next
    modSheetIncidente.EliminarColumnaPersona
End Sub

Public Sub BtnEliminarVehiculo()
    On Error Resume Next
    modSheetIncidente.EliminarColumnaVehiculo
End Sub

Public Sub BtnCargarDesdeID()
    On Error Resume Next
    modSheetIncidente.LoadIncidenteEnHojaDesdeIdActual
End Sub

